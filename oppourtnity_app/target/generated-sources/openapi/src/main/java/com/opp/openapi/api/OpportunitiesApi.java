/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.opp.openapi.api;

import com.opp.openapi.model.Opportunity;
import com.opp.openapi.model.OpportunityInput;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-15T18:28:38.604729300+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "opportunities", description = "the opportunities API")
public interface OpportunitiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /opportunities : Get all opportunities
     *
     * @return A list of opportunities (status code 200)
     */
    @Operation(
        operationId = "opportunitiesGet",
        summary = "Get all opportunities",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of opportunities", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Opportunity.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/opportunities",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Opportunity>> opportunitiesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdDate\" : \"2000-01-23\", \"createdBy\" : \"createdBy\", \"closedDate\" : \"2000-01-23\", \"name\" : \"name\", \"customerId\" : \"customerId\", \"description\" : \"description\", \"id\" : \"id\", \"assignedTo\" : \"assignedTo\", \"status\" : \"status\" }, { \"createdDate\" : \"2000-01-23\", \"createdBy\" : \"createdBy\", \"closedDate\" : \"2000-01-23\", \"name\" : \"name\", \"customerId\" : \"customerId\", \"description\" : \"description\", \"id\" : \"id\", \"assignedTo\" : \"assignedTo\", \"status\" : \"status\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /opportunities/{opportunityId} : Delete an opportunity
     *
     * @param opportunityId ID of the opportunity to delete (required)
     * @return Opportunity deleted successfully (status code 204)
     *         or Opportunity not found (status code 404)
     */
    @Operation(
        operationId = "opportunitiesOpportunityIdDelete",
        summary = "Delete an opportunity",
        responses = {
            @ApiResponse(responseCode = "204", description = "Opportunity deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Opportunity not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/opportunities/{opportunityId}"
    )
    
    default ResponseEntity<Void> opportunitiesOpportunityIdDelete(
        @Parameter(name = "opportunityId", description = "ID of the opportunity to delete", required = true, in = ParameterIn.PATH) @PathVariable("opportunityId") String opportunityId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /opportunities/{opportunityId} : Get an opportunity by ID
     *
     * @param opportunityId ID of the opportunity to get (required)
     * @return The requested opportunity (status code 200)
     *         or Opportunity not found (status code 404)
     */
    @Operation(
        operationId = "opportunitiesOpportunityIdGet",
        summary = "Get an opportunity by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "The requested opportunity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Opportunity.class))
            }),
            @ApiResponse(responseCode = "404", description = "Opportunity not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/opportunities/{opportunityId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Opportunity> opportunitiesOpportunityIdGet(
        @Parameter(name = "opportunityId", description = "ID of the opportunity to get", required = true, in = ParameterIn.PATH) @PathVariable("opportunityId") String opportunityId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdDate\" : \"2000-01-23\", \"createdBy\" : \"createdBy\", \"closedDate\" : \"2000-01-23\", \"name\" : \"name\", \"customerId\" : \"customerId\", \"description\" : \"description\", \"id\" : \"id\", \"assignedTo\" : \"assignedTo\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /opportunities/{opportunityId} : Update an opportunity
     *
     * @param opportunityId ID of the opportunity to update (required)
     * @param opportunityInput  (required)
     * @return The updated opportunity (status code 200)
     *         or Opportunity not found (status code 404)
     */
    @Operation(
        operationId = "opportunitiesOpportunityIdPut",
        summary = "Update an opportunity",
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated opportunity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Opportunity.class))
            }),
            @ApiResponse(responseCode = "404", description = "Opportunity not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/opportunities/{opportunityId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Opportunity> opportunitiesOpportunityIdPut(
        @Parameter(name = "opportunityId", description = "ID of the opportunity to update", required = true, in = ParameterIn.PATH) @PathVariable("opportunityId") String opportunityId,
        @Parameter(name = "OpportunityInput", description = "", required = true) @Valid @RequestBody OpportunityInput opportunityInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdDate\" : \"2000-01-23\", \"createdBy\" : \"createdBy\", \"closedDate\" : \"2000-01-23\", \"name\" : \"name\", \"customerId\" : \"customerId\", \"description\" : \"description\", \"id\" : \"id\", \"assignedTo\" : \"assignedTo\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /opportunities : Create a new opportunity
     *
     * @param opportunityInput  (required)
     * @return The created opportunity (status code 201)
     */
    @Operation(
        operationId = "opportunitiesPost",
        summary = "Create a new opportunity",
        responses = {
            @ApiResponse(responseCode = "201", description = "The created opportunity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Opportunity.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/opportunities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Opportunity> opportunitiesPost(
        @Parameter(name = "OpportunityInput", description = "", required = true) @Valid @RequestBody OpportunityInput opportunityInput
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdDate\" : \"2000-01-23\", \"createdBy\" : \"createdBy\", \"closedDate\" : \"2000-01-23\", \"name\" : \"name\", \"customerId\" : \"customerId\", \"description\" : \"description\", \"id\" : \"id\", \"assignedTo\" : \"assignedTo\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
